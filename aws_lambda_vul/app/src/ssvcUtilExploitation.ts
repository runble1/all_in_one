import axios from 'axios';
import { Exploitation } from './ssvcTypes';

// Evidence parameters type
interface ExploitationEvidence {
    cisaCatalogEvidence: boolean;
    jpcertCcEvidence: boolean;
    githubEvidence: boolean;
    exploitDbEvidence: boolean;
    vulnDbEvidence: boolean;
  }
  
export async function evaluateExploitation(cveId: string): Promise<Exploitation> {
  try {
    // Evaluate EPSS
    const epssExploitation = await evaluateEPSS(cveId);

    // You could also get other evidences here
    const {
      cisaCatalogEvidence,
      jpcertCcEvidence,
      githubEvidence,
      exploitDbEvidence,
      vulnDbEvidence,
    } = await getOtherEvidences(cveId);

    switch (true) {
      case epssExploitation === Exploitation.Active || cisaCatalogEvidence || jpcertCcEvidence:
        return Exploitation.Active;
      case epssExploitation === Exploitation.Poc || githubEvidence || exploitDbEvidence || vulnDbEvidence:
        return Exploitation.Poc;
      default:
        return Exploitation.None;
    }
  } catch (error) {
    console.error('Error evaluating exploitation:', error);
    throw new Error('Could not evaluate exploitation');
  }
}

export async function evaluateEPSS(cveId: string): Promise<Exploitation> {
  try {
    const response = await axios.get(`https://api.first.org/data/v1/epss?cve=${cveId}`);
    const epssScore = parseFloat(response.data.data[0].epss);

    switch (true) {
      case epssScore >= 0.4:
        return Exploitation.Active;
      case epssScore >= 0.2:
        return Exploitation.Poc;
      default:
        return Exploitation.None;
    }
  } catch (error) {
    console.error('Error fetching data from EPSS API:', error);
    throw new Error('Could not evaluate exploitation');
  }
}

async function getOtherEvidences(cveId: string): Promise<ExploitationEvidence> {
  // Implement your logic to get other evidences
  // ...
  return {
    cisaCatalogEvidence: false,
    jpcertCcEvidence: false,
    githubEvidence: false,
    exploitDbEvidence: false,
    vulnDbEvidence: false,
  };
}
