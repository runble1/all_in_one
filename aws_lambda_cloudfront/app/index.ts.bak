import { URLSearchParams } from 'url';
import * as https from 'https';
import * as process from 'process';

const SLACK_URL = "https://slack.com/api/chat.postMessage";
const SLACK_BOT_TOKEN = process.env['SLACK_BOT_TOKEN'];

// Unused
const GITHUB_API_TOKEN = process.env['GITHUB_API_TOKEN'];
const GITHUB_API_BASE_URL = "https://api.github.com";

export async function handler(event: any, context: any) {
    console.log("Event:");
    console.log(event);
    const headers = event.headers;

    // Check for x-github-event header
    if (!headers['x-github-event']) {
        console.log("NOT GITHUB EVENT");
        return {
            statusCode: 400,
            body: "x-github-event header not found."
        };
    }

    if (headers['x-github-event'] === "code_scanning_alert") {
        const body = JSON.parse(event.body);

        const repo = body.repository.full_name;
        const rule = body.alert.rule.name;
        const url = body.alert.html_url;

        let message = "";
        if (body.action === "created" && body.alert.state === "open") {
            message = `Code Scanning Alert *Opened*: *${rule}* in ${repo}\nURL: ${url}`;
        } else if (body.action === "fixed" && body.alert.state === "fixed") {  // trivyの場合？
            message = `Code Scanning Alert *Fixed*: *${rule}* in ${repo}\nURL: ${url}`;
        }

        const postData = new URLSearchParams({
            token: process.env["SLACK_BOT_TOKEN"] || '',
            channel: process.env["SLACK_CHANNEL_ID"] || '',
            text: message,
            username: "sec-aws-alert",
        });

        const requestOptions = {
            hostname: 'slack.com',
            port: 443,
            path: '/api/chat.postMessage',
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Content-Length': Buffer.byteLength(postData.toString()),
                'Authorization': `Bearer ${process.env["SLACK_BOT_TOKEN"]}`
            }
        };

        return new Promise((resolve, reject) => {
            const req = https.request(requestOptions, (res) => {
                console.log('end');
                resolve({
                    statusCode: 200,
                    body: "Notification sent to Slack."
                });
            });

            req.on('error', (e) => {
                console.error(`Problem with request: ${e.message}`);
                reject({
                    statusCode: 500,
                    body: `Error: ${e.message}`
                });
            });

            // Write data to request body
            req.write(postData.toString());
            req.end();
        });
    } else {
        return {
            statusCode: 200,
            body: "Unhandled GitHub event."
        };
    }
}
